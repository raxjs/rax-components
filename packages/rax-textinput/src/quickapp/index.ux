<template>
  <div>
    <input if="{{!multiline}}" disabled="{{!editable}}" id="{{id}}" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" type="{{keyboardType}}" value="{{inputValue}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  onchange="onChangeValue"></input>
    <textarea if="{{multiline}}" disabled="{{!editable}}" id="{{id}}" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" value="{{inputValue}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  onchange="onChangeValue"></textarea>
  </div>
</template>
<script>
  import keyboardTypeMap from '../keyboardTypeMap';
  export default {
    props: [ 'id', 'styleSheet', 'value', 'bindAppear',
    'className',  'bindClick', 'bindPress',  'numberOfLines','secureTextEntry',
    'multiline', 'accessibilityLabel','autoComplete', 'autoFocus','fixed',
    'editable', 'keyboardType','maxLength', 'maxNumberOfLines', 'enableNative',
    'placeholder', 'placeholderColor', 'password','randomNumber', 'bindConfirm',
    'showCount', 'selectionStart', 'selectionEnd', 'bindBlur', 'confirmType',
    'bindFocus', 'bindChange','bindChangeText', 'bindInput', 'defaultValue', 'tagId'],
    data() {
      let _style = this.styleSheet || {};
      const autocomplete = this.autoComplete ? 'on' : 'off';
      let keyboardType = 'text';
      if (this.password || this.secureTextEntry) {
        keyboardType = 'password';
      } else if (this.keyboardType) {
        keyboardType = keyboardTypeMap[this.keyboardType];
      }
      const value = this.value || this.defaultValue;
      if (this.numberOfLines) {
        if (typeof _style === 'string') {
          _style = _style + ';lines: ' + this.numberOfLines + ';';
        } else {
          _style = Object.assign({}, _style, {
            lines: this.numberOfLines
          });
        }
      }
      return {
        id: this.id,
        style: _style || {},
        editable: this.editable || true,
        className: this.className,
        placeholder: this.placeholder,
        eventClick: this.bindClick || this.bindPress,
        bindChange: this.bindChangeText || this.bindChange,
        keyboardType: keyboardType,
        inputValue: value,
        maxlength: this.maxLength,
        autocomplete,
        multiline: this.multiline,
      }
    },
    onChangeValue(val) {
      this.bindChange(val.value || '');
    },
    onInit() {
      this.$watch('styleSheet', 'watchStyleChange');
      this.$watch('className', 'watchClassChange');
      this.$watch('id', 'watchIdChange');
      this.$watch('keyboardType', 'watchTypeChange');
      this.$watch('placeholder', 'watchPlaceChange');
      this.$watch('maxlength', 'watchMaxChange');
    },
    watchStyleChange(newStyleValue, oldStyleValue) {
      this.style = newStyleValue;
    },
    watchClassChange(newClassNameValue, oldClassNameValue) {
      this.className = newClassNameValue;
    },
    watchIdChange(newIdValue, oldIdValue) {
      this.id = newIdValue;
    },
    watchTypeChange(newTypeValue, oldTypeValue) {
      this.keyboardType = newTypeValue;
    },
    watchPlaceChange(newPlaceholderValue, oldPlaceholderValue) {
      this.placeholder = newPlaceholderValue;
    },
    watchMaxChange(newMaxLengthValue, oldMaxLengthValue) {
      this.maxlength = newMaxLengthValue;
    }
  };
</script>
