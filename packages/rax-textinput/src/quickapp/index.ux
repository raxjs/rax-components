<template>
  <div>
    <input if="{{!multiline}}" disabled="{{!editable}}" enterkeyclick="bindConfirm" id="{{id}}" focus="bindFocus" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" type="{{type}}" value="{{value}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  change="{{bindChange || bindChangeText}}"></input>
    <textarea else id="{{id}}" disabled="{{!editable}}" enterkeyclick="bindConfirm" focus="bindFocus" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" value="{{value}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  change="bindChange"></textarea>
  <div>
</template>
<script>
  export default {
    props: [ 'id', 'styleSheet', 'type', 'value', 
    'className', 'placeholder',  'bindClick', 'bindPress', 
    'bindChangeText','bindChange', 'maxLength', 'autoComplete', 'password',
    'multiline', 'numberOfLines', 'autoFocus', 'maxNumberOfLines',
    'bindFocus', 'placeholderColor', 'secureTextEntry', 'defaultValue', 'bindConfirm', 'enableNative', 'fixed', 'editable'],
    data() {
      let _style = this.styleSheet || {};
      const autocomplete = this.autoComplete ? 'on' : 'off';
      const value = (!this.value && this.defaultValue) ? this.defaultValue : this.value;
      const type = (this.password || this.secureTextEntry) ? 'password' : this.type;
      if (this.maxNumberOfLines && this.multiline) {
        if (typeof _style === 'string') {
          _style = _style + ';lines: ' + this.maxNumberOfLines + ';';
        } else {
          _style = Object.assign({}, _style, {
            lines: this.maxNumberOfLines
          });
        }
      } else if (this.numberOfLines) {
        if (typeof _style === 'string') {
          _style = _style + ';lines: ' + this.numberOfLines + ';';
        } else {
          _style = Object.assign({}, _style, {
            lines: this.numberOfLines
          });
        }
      }
      if (this.placeholderColor) {
        if (typeof _style === 'string') {
          _style = _style + ';placeholder-color: ' + this.placeholderColor + ';';
        } else {
          _style = Object.assign({}, _style, {
            placeholderColor: this.placeholderColor
          });
        }
      }
      return {
        id: this.id,
        style: _style || {},
        className: this.className,
        placeholder: this.placeholder,
        eventClick: this.bindClick || this.bindPress,
        type,
        value,
        maxlength: this.maxLength,
        autocomplete,
        multiline: this.multiline,
      }
    },
    onInit() {
      this.$watch('styleSheet', 'watchStyleSheetChange')
      this.$watch('className', 'watchClassNameChange')
      this.$watch('id', 'watchIdChange')
      this.$watch('type', 'watchTypeChange')
      this.$watch('placeholder', 'watchPlaceHolderChange')
      this.$watch('maxlength', 'watchMaxLengthChange')
      this.$watch('autocomplete', 'watchAutoCompleteChange')
    },
    watchStyleSheetChange(newStyle, oldStyle) {
      this.style = newStyle;
    },
    watchClassNameChange(newClassName, oldClassName) {
      this.className = newClassName;
    },
    watchIdChange(newId, oldId) {
      this.id = newId;
    },
    watchTypeChange(newType, oldType) {
      this.type = newType;
    },
    watchPlaceHolderChange(newPlaceHolder, oldPlaceHolder) {
      this.placeholder = newPlaceHolder;
    },
    watchMaxLengthChange(newMaxLength, oldMaxLength) {
      this.maxlength = newMaxLength;
    },
    watchAutoCompleteChange(newAutoComplete, oldAutoComplete) {
      this.autocomplete = newAutoComplete;
    },
  };
</script>
