<template>
  <span>
    <input if="{{!multiline}}" disabled="{{editable}}" id="{{id}}" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" type="{{type}}" value="{{value}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  onchange="bindChange"></input>
    <textarea if="{{multiline}}" disabled="{{editable}}" id="{{id}}" maxlength="{{maxlength}}" autocomplete="{{autocomplete}}" value="{{value}}" style="{{style}}" class="{{className}}" placeholder="{{placeholder}}" @click="eventClick"  onchange="bindChange"></textarea>
  <span>
</template>
<script>
  export default {
    props: [ 'id', 'styleSheet', 'type', 'value', 'bindAppear',
    'className',  'bindClick', 'bindPress',  'numberOfLines',
    'multiline', 'accessibilityLabel','autoComplete', 'autoFocus','fixed',
    'editable', 'keyboardType','maxLength', 'maxNumberOfLines', 'enableNative',
    'placeholder', 'placeholderColor', 'password','randomNumber', 'bindConfirm',
    'showCount', 'selectionStart', 'selectionEnd', 'bindBlur', 'confirmType',
    'bindFocus', 'bindChange','bindChangeText', 'bindInput', 'defaultValue'],
    data() {
      let _style = this.styleSheet || {};
      const autocomplete = this.autoComplete ? 'on' : 'off';
      const type = this.password ? 'password' : 'text';
      const value = this.value || this.defaultValue;
      if (this.numberOfLines) {
        if (typeof _style === 'string') {
          _style = _style + ';lines: ' + this.numberOfLines + ';';
        } else {
          _style = Object.assign({}, _style, {
            lines: this.numberOfLines
          });
        }
      }
      return {
        id: this.id,
        style: _style || {},
        editable: this.editable,
        className: this.className,
        placeholder: this.placeholder,
        eventClick: this.bindClick || this.bindPress,
        bindChange: this.bindChangeText || this.bindChange,
        type: type,
        value: this.value,
        maxlength: this.maxLength,
        autocomplete,
        multiline: this.multiline,
      }
    },
    onInit() {
      // 监听数据变化
      this.$watch('styleSheet', 'watchStyleChange');
      this.$watch('className', 'watchClassChange');
      this.$watch('id', 'watchIdChange');
      this.$watch('type', 'watchTypeChange');
      this.$watch('placeholder', 'watchPlaceChange');
      this.$watch('maxlength', 'watchMaxChange');
      this.$watch('autocomplete', 'watchAutoChange');
    },
    watchStyleChange(newStyleValue, oldStyleValue) {
      this.style = newStyleValue;
    },
    watchClassChange(newClassNameValue, oldClassNameValue) {
      this.className = newV;
    },
    watchIdChange(newIdValue, oldIdValue) {
      this.id = newIdValue;
    },
    watchTypeChange(newTypeValue, oldTypeValue) {
      this.type = newTypeValue;
    },
    watchPlaceChange(newPlaceholderValue, oldPlaceholderValue) {
      this.placeholder = newPlaceholderValue;
    },
    watchMaxChange(newMaxLengthValue, oldMaxLengthValue) {
      this.maxlength = newMaxLengthValue;
    },
    watchAutoChange(newAutocompleteValue, oldAutocompleteValue) {
      this.autocomplete = newAutocompleteValue;
    },
  };
</script>
